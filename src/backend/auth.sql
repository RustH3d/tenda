CREATE TABLE persons (
  id SERIAL NOT NULL PRIMARY KEY,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE
);

CREATE TABLE position (
  id SERIAL NOT NULL PRIMARY KEY,
  title VARCHAR(50) NOT NULL,
  person_id INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE,
  CONSTRAINT fk_position_person FOREIGN KEY (person_id) REFERENCES persons(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE users (
  id SERIAL NOT NULL PRIMARY KEY, 
  email VARCHAR NOT NULL UNIQUE,
  password VARCHAR(32) NOT NULL, 
  person_id INTEGER,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE,

  CONSTRAINT fk_users_person FOREIGN KEY (person_id) REFERENCES persons(id) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE UNIQUE INDEX idx_users_email ON users(email);

CREATE TABLE dni_types (
  id SERIAL NOT NULL PRIMARY KEY,
  type VARCHAR(10) UNIQUE NOT NULL, 
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);


CREATE TABLE languages (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE
);

CREATE TABLE doc_category (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE
)

CREATE TABLE status (
  id SERIAL PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  doc_category_id INTEGER,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE,

  CONSTRAINT fk_status_doc_category FOREIGN KEY (doc_category_id) REFERENCES doc_category (id) ON UPDATE CASCADE ON DELETE SET NULL
);

CREATE TABLE type_doc(
  id SERIAL PRIMARY KEY,
  type VARCHAR(50) NOT NULL UNIQUE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT(NOW()),
  updated_at TIMESTAMP WITH TIME ZONE
)

CREATE TABLE Profiles (
  id SERIAL NOT NULL PRIMARY KEY,
  first_name VARCHAR(45), 
  last_name VARCHAR(45), 
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE Users (
  id SERIAL NOT NULL PRIMARY KEY, 
  email VARCHAR(90) UNIQUE NOT NULL,
  password VARCHAR(100) NOT NULL,
  time_to_request_token TIMESTAMP WITH TIME ZONE,
  token_requested_count INT NOT NULL DEFAULT 0,
  profile_id INT NOT NULL,
  CONSTRAINT users_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES profiles (id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Objects (
  id SERIAL NOT NULL PRIMARY KEY,
  name VARCHAR(60) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE Methods (
  id SERIAL NOT NULL PRIMARY KEY,
  name VARCHAR(60) NOT NULL,
  object_id INT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT methods_object_id_fkey FOREIGN KEY (object_id) REFERENCES objects(id) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO objects (name) VALUES ('AuthService');
INSERT INTO methods (name, object_id) VALUES ('Login', 1), ('Signup', 1), ('RecoverPassword', 1), ('ResetPassword', 1);

CREATE TABLE user_permissions (
  id SERIAL NOT NULL PRIMARY KEY,
  user_id INT NOT NULL,
  permission_id INT NOT NULL,
  CONSTRAINT permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT permissions_permission_id_fkey FOREIGN KEY (method_id) REFERENCES permissions(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE permissions (
    id SERIAL NOT NULL PRIMARY KEY,
    name VARCHAR(150) NOT NULL UNIQUE,
    category_id INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
)